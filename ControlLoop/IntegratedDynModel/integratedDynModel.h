#ifndef INTEGRATED_DYN_MODEL_H
#define INTEGRATED_DYN_MODEL_H

#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include "../CustomLinear/Matrix.h"
#include "../CustomLinear/Vector.h"
#include "../CustomLinear/Quaternion.h"
#include "../Loop/loop.h"
#include "../Loop/init.h"
#include "../LQR/lqr.h"
#include "../LQR/calculateA.h"
#include "../LQR/calculateB.h"
#include "../Filters/EKFs/ExtendedKalmanFilterGeneral.h"
#include "../Filters/EKFs/EKF_xy.h"
#include "../Filters/EKFs/EKF_z.h"
#include "../Filters/Madgwick/Madgwick.h"
#include "../LQR/solveCARE.h"

using namespace std;

//------------------------- Basic Vector Arithmetic Helpers ---------------------------
// TODO: Remove these and replace with the normal vector functions defined
// in the Vector class. These were generated by ChatGPT.

Vector vectorAdd(const Vector &a, const Vector &b);
Vector vectorSubtract(const Vector &a, const Vector &b);
Vector vectorScale(const Vector &a, double scalar);

//------------------------- State Structure ---------------------------------

struct State {
    Vector pos;
    Vector vel;
    Vector accel;
    Quaternion att;
    Vector ang_vel;
    Vector ang_accel;

    State();
};

//------------------------- Rocket Parameters Structure ---------------------------

struct RocketParams {
    double m_static;
    double m_gimbal_top;
    double m_gimbal_bottom;
    double m;

    Vector gimbal_top_COM_offset;
    Vector gimbal_bottom_COM_offset;
    Vector COM_offset;
    Vector COP;
    Vector COP_offset;
    Vector gimbal_offset;
    Vector gimbal_x_distance;
    Vector gimbal_y_distance;

    double g;
    double Cd_x, Cd_y, Cd_z;
    double A_x, A_y, A_z;
    double air_density;

    Matrix I;
    Matrix Inv_I;

    double gimbal_top_I;
    double gimbal_bottom_I;

    double T_max, T_min;
    double gimbal_speed;
    double gimbal_acceleration;

    double dt;

    RocketParams();
};

//------------------------- Quaternion-Based Dynamics Update ---------------------------

State update_dynamics(const RocketParams &P,
                      const Vector &pos,
                      const Vector &vel,
                      const Quaternion &att,
                      const Vector &ang_vel,
                      const Vector &F_net,
                      const Vector &T_net,
                      double delta_t);

//------------------------- Extrinsic Rotation Functions ---------------------------

Matrix get_extrinsic_x_rotation(double x);
Matrix get_extrinsic_y_rotation(double y);
Matrix get_extrinsic_z_rotation(double z);
Matrix get_extrinsic_rotation_matrix(const Vector &euler);

//------------------------- Thrust and Drag Models ---------------------------

pair<Vector, Vector> get_thrust_body(const RocketParams &P, double F_thrust_mag, const Vector &thrust_gimbal);
pair<Vector, Vector> get_drag_body(const RocketParams &P, const Quaternion &att, const Vector &vel, const Vector &v_wind);
void calculate_COM_and_COP_offset(RocketParams &P, const Vector &thrust_gimbal);

//------------------------- Simulation Function ---------------------------

void simulate(RocketParams &P);

#endif // INTEGRATED_DYN_MODEL_H