//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// calculateB.cpp
//
// Code generation for function 'calculateB'
//

// Include files
#include "calculateB.h"
#include "rt_nonfinite.h"
#include "mwmathutil.h"
#include <cstring>

// Function Definitions
void calculateB(const emlrtStack *, real_T m, real_T, real_T, real_T,
                const real_T in5[12], const real_T in6[7], const real_T[3],
                const real_T in8[3], const real_T in9[9], const real_T[9],
                const real_T in11[9], const real_T in12[9], real_T B[84])
{
  real_T b_et1_tmp;
  real_T c_et1_tmp;
  real_T d;
  real_T d1;
  real_T d10;
  real_T d11;
  real_T d12;
  real_T d13;
  real_T d14;
  real_T d15;
  real_T d16;
  real_T d17;
  real_T d18;
  real_T d19;
  real_T d2;
  real_T d20;
  real_T d21;
  real_T d22;
  real_T d23;
  real_T d24;
  real_T d25;
  real_T d26;
  real_T d27;
  real_T d28;
  real_T d3;
  real_T d4;
  real_T d5;
  real_T d6;
  real_T d7;
  real_T d8;
  real_T d9;
  real_T d_et1_tmp;
  real_T e_et1_tmp;
  real_T et1_tmp;
  real_T f_et1_tmp;
  real_T g_et1_tmp;
  real_T h_et1_tmp;
  real_T i_et1_tmp;
  real_T j_et1_tmp;
  // calculateB
  //     B = calculateB(M,F,cDrag,areaVar,IN5,IN6,IN7,IN8,IN9,IN10,IN11,IN12)
  //     This function was generated by the Symbolic Math Toolbox version 24.2.
  //     11-Mar-2025 19:31:00
  et1_tmp = muDoubleScalarCos(in6[2]);
  b_et1_tmp = muDoubleScalarCos(in5[8]);
  c_et1_tmp = muDoubleScalarCos(in5[6]);
  d_et1_tmp = muDoubleScalarSin(in5[8]);
  e_et1_tmp = muDoubleScalarSin(in5[6]);
  f_et1_tmp = muDoubleScalarSin(in5[7]);
  g_et1_tmp = muDoubleScalarCos(in6[1]);
  h_et1_tmp = muDoubleScalarSin(in6[2]);
  i_et1_tmp = muDoubleScalarSin(in6[1]);
  j_et1_tmp = muDoubleScalarCos(in5[7]);
  B[0] = 0.0;
  B[1] = 0.0;
  B[2] = 0.0;
  d = g_et1_tmp * et1_tmp;
  B[3] = ((d * f_et1_tmp + h_et1_tmp * j_et1_tmp * d_et1_tmp) +
          et1_tmp * b_et1_tmp * i_et1_tmp * j_et1_tmp) /
         m;
  d1 = b_et1_tmp * e_et1_tmp;
  d2 = c_et1_tmp * d_et1_tmp;
  d3 = et1_tmp * i_et1_tmp;
  d4 = d_et1_tmp * e_et1_tmp;
  d5 = b_et1_tmp * c_et1_tmp;
  d6 = d2 - d1 * f_et1_tmp;
  d7 = d5 + d4 * f_et1_tmp;
  B[4] = -((-h_et1_tmp * d7 + d3 * d6) + d * j_et1_tmp * e_et1_tmp) / m;
  d4 += d5 * f_et1_tmp;
  d1 -= d2 * f_et1_tmp;
  B[5] = -((h_et1_tmp * d1 - d3 * d4) + d * c_et1_tmp * j_et1_tmp) / m;
  B[6] = 0.0;
  B[7] = 0.0;
  B[8] = 0.0;
  d = in8[2] * h_et1_tmp + in8[1] * g_et1_tmp * et1_tmp;
  d2 = in8[0] * g_et1_tmp + in8[2] * i_et1_tmp;
  d3 = in8[0] * h_et1_tmp - in8[1] * et1_tmp * i_et1_tmp;
  d5 = in9[5] * in9[5];
  d8 = in9[1] * in9[2];
  d9 = in9[2] * in9[2];
  d10 = in9[1] * in9[1];
  d11 = in9[0] * in9[4];
  d12 = (((in9[0] * d5 + d9 * in9[4]) + d10 * in9[8]) - d8 * in9[5] * 2.0) -
        d11 * in9[8];
  d13 = c_et1_tmp * j_et1_tmp;
  d14 = (d * d4 + et1_tmp * d1 * d2) - d13 * d3;
  d15 = in9[2] * in9[5] - in9[1] * in9[8];
  d16 = b_et1_tmp * j_et1_tmp;
  d17 = (f_et1_tmp * d3 + d16 * d) - et1_tmp * j_et1_tmp * d_et1_tmp * d2;
  d18 = j_et1_tmp * e_et1_tmp;
  d = (d * d6 + et1_tmp * d7 * d2) + d18 * d3;
  d3 = in9[1] * in9[5] - in9[2] * in9[4];
  d5 -= in9[4] * in9[8];
  B[9] = (d3 * d14 / d12 + -(d15 * d) / d12) + -(d5 * d17) / d12;
  d8 -= in9[0] * in9[5];
  d9 -= in9[0] * in9[8];
  B[10] = (d8 * d14 / d12 + d15 * d17 / d12) + d9 * d / d12;
  d10 -= d11;
  B[11] = (-(d8 * d) / d12 + -(d10 * d14) / d12) + d3 * d17 / d12;
  B[12] = 0.0;
  B[13] = 0.0;
  B[14] = 0.0;
  d = in6[0] * g_et1_tmp;
  d11 = d * et1_tmp;
  d14 = in6[0] * et1_tmp;
  d17 = d14 * i_et1_tmp;
  B[15] = -(d17 * f_et1_tmp - d11 * b_et1_tmp * j_et1_tmp) / m;
  B[16] = -(d11 * d6 - d17 * j_et1_tmp * e_et1_tmp) / m;
  B[17] = (d11 * d4 + d14 * c_et1_tmp * i_et1_tmp * j_et1_tmp) / m;
  B[18] = 0.0;
  B[19] = 0.0;
  B[20] = 0.0;
  d11 = in6[0] * in8[1];
  d17 = in8[2] * g_et1_tmp - in8[0] * i_et1_tmp;
  d19 = d11 * et1_tmp;
  d20 = d19 * i_et1_tmp;
  d21 = d11 * g_et1_tmp;
  d22 = d21 * et1_tmp;
  d19 = (d22 * f_et1_tmp + d14 * j_et1_tmp * d_et1_tmp * d17) +
        d19 * b_et1_tmp * i_et1_tmp * j_et1_tmp;
  d23 = -in6[0] * et1_tmp;
  d24 = (d23 * d7 * d17 + d20 * d6) + d22 * j_et1_tmp * e_et1_tmp;
  d25 = d14 * d1;
  d17 = (d25 * d17 - d20 * d4) + d22 * c_et1_tmp * j_et1_tmp;
  B[21] = d3 * d17 / d12 + (d15 * d24 / d12 + d5 * d19 / d12);
  B[22] = (-(d15 * d19) / d12 - d9 * d24 / d12) + d8 * d17 / d12;
  B[23] = (-(d10 * d17) / d12 - d3 * d19 / d12) + d8 * d24 / d12;
  B[24] = 0.0;
  B[25] = 0.0;
  B[26] = 0.0;
  d17 = d * h_et1_tmp;
  B[27] = -((d23 * j_et1_tmp * d_et1_tmp + d17 * f_et1_tmp) +
            in6[0] * b_et1_tmp * i_et1_tmp * h_et1_tmp * j_et1_tmp) /
          m;
  d19 = in6[0] * i_et1_tmp * h_et1_tmp;
  B[28] = ((d14 * d7 + d19 * d6) + d17 * j_et1_tmp * e_et1_tmp) / m;
  B[29] = -((d25 + d19 * d4) - d * c_et1_tmp * h_et1_tmp * j_et1_tmp) / m;
  B[30] = 0.0;
  B[31] = 0.0;
  B[32] = 0.0;
  d = in6[0] * in8[2] * et1_tmp - d21 * h_et1_tmp;
  d11 = in6[0] * in8[0] * et1_tmp + d11 * i_et1_tmp * h_et1_tmp;
  d14 = in6[0] * h_et1_tmp;
  d17 = (f_et1_tmp * d11 + d16 * d) + d14 * j_et1_tmp * d_et1_tmp * d2;
  d19 = (d * d6 + d18 * d11) - d14 * d7 * d2;
  d = (-d * d4 + d13 * d11) + d14 * d1 * d2;
  B[33] = (-(d5 * d17) / d12 + -(d3 * d) / d12) + -(d15 * d19) / d12;
  B[34] = (d15 * d17 / d12 + d9 * d19 / d12) + -(d8 * d) / d12;
  B[35] = (d10 * d / d12 + d3 * d17 / d12) + -(d8 * d19) / d12;
  std::memset(&B[36], 0, 9U * sizeof(real_T));
  d = (in11[0] * d4 - in11[1] * d1) + in11[2] * c_et1_tmp * j_et1_tmp;
  d2 = (in11[1] * d4 - in11[4] * d1) + in11[5] * c_et1_tmp * j_et1_tmp;
  d11 = (in11[2] * d4 - in11[5] * d1) + in11[8] * c_et1_tmp * j_et1_tmp;
  d14 = in5[9] + in6[3] * b_et1_tmp * j_et1_tmp;
  d17 = j_et1_tmp * d_et1_tmp;
  d19 = in5[11] + in6[3] * d4;
  d20 = (-in11[0] * d6 + in11[1] * d7) + in11[2] * j_et1_tmp * e_et1_tmp;
  d21 = in11[5] * j_et1_tmp;
  d22 = (-in11[1] * d6 + in11[4] * d7) + d21 * e_et1_tmp;
  d23 = (-in11[2] * d6 + in11[5] * d7) + in11[8] * j_et1_tmp * e_et1_tmp;
  d24 = in5[10] - in6[3] * d6;
  d25 = (d4 * d20 - d1 * d22) + d13 * d23;
  et1_tmp = (-d6 * d20 + d7 * d22) + d18 * d23;
  d22 = (-f_et1_tmp * d23 + d16 * d20) + d17 * d22;
  d23 = (d4 * d - d1 * d2) + d13 * d11;
  h_et1_tmp = (-d6 * d + d7 * d2) + d18 * d11;
  d2 = (-f_et1_tmp * d11 + d17 * d2) + d16 * d;
  d11 = (d4 * d23 + -d6 * h_et1_tmp) + d16 * d2;
  i_et1_tmp = (-in11[2] * f_et1_tmp + in11[0] * b_et1_tmp * j_et1_tmp) +
              in11[1] * j_et1_tmp * d_et1_tmp;
  d26 = (-in11[5] * f_et1_tmp + in11[1] * b_et1_tmp * j_et1_tmp) +
        in11[4] * j_et1_tmp * d_et1_tmp;
  d21 = (-in11[8] * f_et1_tmp + in11[2] * b_et1_tmp * j_et1_tmp) +
        d21 * d_et1_tmp;
  d27 = (-f_et1_tmp * d21 + d16 * i_et1_tmp) + d17 * d26;
  d28 = (d4 * i_et1_tmp - d1 * d26) + d13 * d21;
  d21 = (-d6 * i_et1_tmp + d7 * d26) + d18 * d21;
  d2 = (d14 * d2 + d19 * d23) + d24 * h_et1_tmp;
  d23 = (d4 * d25 + -d6 * et1_tmp) + d16 * d22;
  h_et1_tmp = d4 * d28 + (-d6 * d21 + d16 * d27);
  d21 = (d14 * d27 + d19 * d28) + d24 * d21;
  d22 = (d14 * d22 + d19 * d25) + d24 * et1_tmp;
  d25 = ((d14 * d11 - d19 * h_et1_tmp) - d21 * d4) + d16 * d2;
  d2 = ((d6 * d2 + d4 * d22) + d19 * d23) - d24 * d11;
  d11 = ((d14 * d23 - d24 * h_et1_tmp) + d21 * d6) + d16 * d22;
  B[45] = (d5 * d2 / d12 + -(d15 * d25) / d12) + d3 * d11 / d12;
  B[46] = (d9 * d25 / d12 + -(d15 * d2) / d12) + d8 * d11 / d12;
  B[47] = (-(d3 * d2) / d12 + -(d10 * d11) / d12) + -(d8 * d25) / d12;
  std::memset(&B[48], 0, 9U * sizeof(real_T));
  d2 = (in12[0] * d4 - in12[1] * d1) + in12[2] * c_et1_tmp * j_et1_tmp;
  d11 = (in12[1] * d4 - in12[4] * d1) + in12[5] * c_et1_tmp * j_et1_tmp;
  d14 = (in12[2] * d4 - in12[5] * d1) + in12[8] * c_et1_tmp * j_et1_tmp;
  d19 = (-in12[2] * f_et1_tmp + in12[0] * b_et1_tmp * j_et1_tmp) +
        in12[1] * j_et1_tmp * d_et1_tmp;
  d21 = (-in12[5] * f_et1_tmp + in12[1] * b_et1_tmp * j_et1_tmp) +
        in12[4] * j_et1_tmp * d_et1_tmp;
  d22 = in12[5] * j_et1_tmp;
  d23 = (-in12[8] * f_et1_tmp + in12[2] * b_et1_tmp * j_et1_tmp) +
        d22 * d_et1_tmp;
  d24 = in5[9] + in6[4] * j_et1_tmp * d_et1_tmp;
  d25 = (-f_et1_tmp * d23 + d16 * d19) + d17 * d21;
  et1_tmp = in5[11] - in6[4] * d1;
  h_et1_tmp = (d4 * d19 - d1 * d21) + d13 * d23;
  d19 = (-d6 * d19 + d7 * d21) + d18 * d23;
  d23 = (-f_et1_tmp * d14 + d17 * d11) + d16 * d2;
  d26 = (d4 * d2 - d1 * d11) + d13 * d14;
  d27 = in5[10] + in6[4] * d7;
  d2 = (-d6 * d2 + d7 * d11) + d18 * d14;
  d14 = (-in12[0] * d6 + in12[1] * d7) + in12[2] * j_et1_tmp * e_et1_tmp;
  d22 = (-in12[1] * d6 + in12[4] * d7) + d22 * e_et1_tmp;
  d28 = (-in12[2] * d6 + in12[5] * d7) + in12[8] * j_et1_tmp * e_et1_tmp;
  g_et1_tmp = -d1 * h_et1_tmp + (d7 * d19 + d17 * d25);
  d19 = (d24 * d25 + et1_tmp * h_et1_tmp) + d27 * d19;
  d16 = (-f_et1_tmp * d28 + d16 * d14) + d17 * d22;
  d4 = (d4 * d14 - d1 * d22) + d13 * d28;
  d6 = (-d6 * d14 + d7 * d22) + d18 * d28;
  d13 = (d24 * d23 + et1_tmp * d26) + d27 * d2;
  d14 = (d24 * d16 + et1_tmp * d4) + d27 * d6;
  d4 = (-d1 * d4 + d7 * d6) + d17 * d16;
  d2 = (-d1 * d26 + d7 * d2) + d17 * d23;
  d6 = d27 * g_et1_tmp;
  d16 = d19 * d7;
  d18 = d17 * d14;
  d23 = ((d24 * d4 - d6) - d16) + d18;
  d7 = ((d7 * d13 + d1 * d14) - et1_tmp * d4) + d27 * d2;
  d1 = ((d24 * d2 - et1_tmp * g_et1_tmp) + d19 * d1) + d17 * d13;
  B[57] = (-(d15 * d1) / d12 + d3 * d23 / d12) + -(d5 * d7) / d12;
  B[58] = (d8 * d23 / d12 + d15 * d7 / d12) + d9 * d1 / d12;
  B[59] = (-(d8 * d1) / d12 + d3 * d7 / d12) +
          d10 * (((-d24 * d4 + d6) + d16) - d18) / d12;
  std::memset(&B[60], 0, 9U * sizeof(real_T));
  B[69] = (d5 * i_et1_tmp / d12 - d3 * d / d12) + -(d15 * d20) / d12;
  B[70] = (-(d15 * i_et1_tmp) / d12 + d9 * d20 / d12) + -(d8 * d) / d12;
  B[71] = (d10 * d / d12 - d3 * i_et1_tmp / d12) + -(d8 * d20) / d12;
  std::memset(&B[72], 0, 9U * sizeof(real_T));
  B[81] = (d5 * d21 / d12 - d3 * d11 / d12) + -(d15 * d22) / d12;
  B[82] = (-(d15 * d21) / d12 + d9 * d22 / d12) + -(d8 * d11) / d12;
  B[83] = (d10 * d11 / d12 - d3 * d21 / d12) + -(d8 * d22) / d12;
}

// End of code generation (calculateB.cpp)
